' The diagram uses PlantUML. A picture will always be saved with the same name.
' Please note that this is a conceptual model, implementation may differ. For
' example: I won't really create a class called Request, I'll just use objects.
' Also, not reviewed yet.
@startuml
  title Class Diagram. Doesn't have to represent actual truth!
  RequestRunnerSingleton --> "0..*" Request : at any times contains
  PhaseRunner --> "0..*" Phase : has
  Phase <|-- Logout
  Phase <|-- Login
  Phase <|-- GetYears
  Phase <|-- ScrapeGrades
  Logout ..> Login : prepares data for
  Login ..> GetYears : prepares data for
  GetYears ..> ScrapeGrades : prepares data for
  Phase --> "1" RequestRunnerSingleton : uses
  ScraperSingleton --> "1" PhaseRunner : uses
  RequestRunnerSingleton ..> Utilities : uses some of
  Phase ..> Utilities : uses some of
  class Request {
    ..Either 'GET' or 'POST'..
    +fn:String
    +url:String
    +handler:Function
    +infoForHandler:String
  }
  class RequestRunnerSingleton {
    #delay:Number
    #requestQ:Request[]
    #interval:Interval
    +RequestRunnerSingleton(delay:Number)
    +void changeDelay(delay:Number)
    +void emptyQueue()
    +void addRequestToQueue(request:Request)
    #applyRequest(request:Request)
  }
  abstract class Phase {
    +Phase(prevResult:Result, callback:Function(Result))
  }
  class Logout {
    ..Needs no data at all..
    +Logout(prevResult:Result)
    #logoutHandler(xhr)
  }
  note bottom of Logout : Only class that does the work even if err.length > 0.
  class Login {
    ..{user, pass}..
    +Login(prevResult:Result)
    #loginHandler(xhr)
  }
  class GetYears {
    ..Assumes logged in..
    ..{user}..
    #termsCount:Int
    #years:String Array[3][]
    +GetYears(prevResult:Result)
    #getYearsHandler(xhr)
    ..result:years:String Array[3][]..
    ..Example: [['12', '11'], [], ['10']]..
  }
  class ScrapeGrades {
    ..Assumes logged in..
    ..{user, years:String Array[3][]}..
    #termsYearsCount:Int[3]
    #doneTermsYearsCount:Int[3]
    +ScrapeGrades(prevResult:Result)
    #scrapeTermHandler(xhr)
    ..result:{0..*String:Array[3] each either HTML Table or undefined}..
    ..Example: {'12':[HT, undefined, HT], '10':[HT, HT, HT]}..
  }
  class PhaseRunner {
    #phases:Phase[]
    #someInput:Result
' Should be Function(Result) but PlantUML would consider it a function
    #callback:Function
    #lastResult:Result
    #currentIndex:Int
    #receivedStopSignal:Bool
    +PhaseRunner(phases:Phase[], someInput:Result, callback:Function(Result))
    ..Updates callback and calls it when stopped..
    ..i.e., doesnt call the one it was constructed with..
    +void stopEarly(newCallback:Function(result))
    #finish()
    ..This is the callback of each Phase..
    #callNext(Result)
  }
  note right of PhaseRunner
    You shouldnt have 2 instances running at the same time.
    Also, an instance can be used once only (Obvious from how the code is).
  end note
  class ScraperSingleton {
    #phases:phases[]
    #phaseRunner:PhaseRunner
    #user:String
    #pass:String
    #callback:Function that takes nothing
    #callbackAfterLastStopped: Function that takes a Result
    +start(user, pass, callback, callbackAfterLastStopped/*optional*/)
    #startActual:Function(Result)
  }
  class Result {
    +err:Error[]
    +user:String, for checking on most pages
    +otherEntries
  }
  class Utilities {
    +void sendGET(url:String, handler:Function, infoForHandler:Object)
    +void sendPOST(url:String, nameValuePairs:Array[][2], handler:Function,
              infoForHandler:Object)
    +DOMObject parseHTML(anHTMLString:String)
    +Bool/String checkUser(user:String, doc:DOMObject)
    +Function curryOneParam(fn:Function, param:var)
    +Bool/DOMObject handlerBase(xhr)
    #void initReq(url:String, handler:Function, infoForHandler:Object)
  }
@enduml
