' The diagram uses PlantUML. A picture will always be saved with the same name.
' Interface diagram: i.e., a class diagram with only interfaces. My notation xD
' Please note that this is a conceptual model, implementation may differ. For
' example: I won't really create a class called Request, I'll just use objects.
' Also, may not resemble exactly the class diagram.
@startuml
  title Interface Diagram. Doesn't have to represent actual truth!
  RequestRunnerSingleton --> "0..*" Request : at any times contains
  PhaseRunner --> "0..*" Phase : has
  Phase --> "1" RequestRunnerSingleton : uses
  ScraperSingleton --> "1" PhaseRunner : uses
  class Request {
    ..Either 'GET' or 'POST'..
    +fn:String
    +url:String
    +handler:Function
    +infoForHandler:String
  }
  interface RequestRunnerSingleton {
    +RequestRunnerSingleton(delay:Number)
    +void changeDelay(delay:Number)
    +void emptyQueue()
    +void addRequestToQueue(request:Request)
  }
  interface Phase {
    ..Every Phase is a function NOT a class. i.e., example:..
    ..new PhaseRunner([logout, login,..])..
    ..i.e., you dont create a phase object..
    .But don.
    +Phase(prevResult:Result, callback:Function(Result))
  }
  note right of Phase
    Every Phase is actually a function, not a class.
    So, for example, to create a PhaseRunner with some Phases:
    new PhaseRunner([logout, login..]) where `logout` and `login` are Phase
    names NOT variables that hold instances of them.
  end note
  interface PhaseRunner {
    +PhaseRunner(phases:Phase[], someInput:Result, callback:Function(Result))
    ..Updates callback and calls it when stopped..
    +void stopEarly(newCallback:Function(result))
  }
  interface ScraperSingleton {
    +start(user, pass, callback, callbackAfterLastStopped/*optional*/)
  }
  interface Result {
    +err:String[]
  }
@enduml
